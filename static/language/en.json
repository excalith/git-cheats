[
	{
		"name": "init",
		"description": "Create an empty Git repository or reinitialize an existing one",
		"category": "Create",
		"keywords": "create init start",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "init",
				"description": "Create an empty Git repository or reinitialize an existing one"
			},
			{
				"complexity": 3,
				"code": "init --template=[template-directory]",
				"description": "Create Git repository with template directory contents"
			}
		]
	},
	{
		"name": "clone",
		"description": "Creates a local copy of a project that already exists remotely",
		"category": "Create",
		"keywords": "create clone new",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "clone ssh://user@domain.com/repo.git",
				"description": "Clone target repository"
			},
			{
				"complexity": 2,
				"code": "clone -b [branch-name] ssh://user@domain.com/repo.git",
				"description": "Clone a repository with branch-name checked out"
			},
			{
				"complexity": 3,
				"code": "clone ssh://user@domain.com/repo.git --depth=[number]",
				"description": "Clones target repository with history truncated to depth"
			}
		]
	},
	{
		"name": "submodule",
		"description": "Initialize, update or inspect submodules",
		"category": "Create",
		"keywords": "create submodule new",
		"complexity": 2,
		"usage": [
			{
				"complexity": 1,
				"code": "submodule add https://github.com/excalith/git-cheats",
				"description": "Adds url as submodule"
			},
			{
				"complexity": 2,
				"code": "submodule init",
				"description": "Initializes local config file"
			},
			{
				"complexity": 2,
				"code": "submodule update",
				"description": "Fetch all data from submodule"
			},
			{
				"complexity": 3,
				"code": "submodule update --init --recursive",
				"description": "Updates local submodule"
			},
			{
				"complexity": 3,
				"code": "submodule sync --recursive",
				"description": "If submodule cannot be reached somehow, sync command will help you resync your config"
			}
		]
	},
	{
		"name": "add",
		"description": "Stages changes in the working tree",
		"category": "Changes",
		"keywords": "changes add",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "add [source]",
				"description": "Adds given file to stage area"
			},
			{
				"complexity": 1,
				"code": "add folder/*",
				"description": "Adds all files within given folder"
			},
			{
				"complexity": 1,
				"code": "add *.extension",
				"description": "Adds all extension files to stage area"
			},
			{
				"complexity": 3,
				"code": "add --patch [source]",
				"description": "Interactively choose hunks of patch between the index and the work tree and add them to the index"
			}
		]
	},
	{
		"name": "status",
		"description": "Shows the status of changes as untracked, modified, or staged",
		"category": "Changes",
		"keywords": "changes status",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "status",
				"description": "Changed files on your working directory"
			},
			{
				"complexity": 2,
				"code": "status -s",
				"description": "Give the output in the short-format"
			},
			{
				"complexity": 2,
				"code": "status -b",
				"description": "Show the branch and tracking info even in short-format"
			}
		]
	},
	{
		"name": "diff",
		"description": "Shows file differences not yet staged",
		"category": "Changes",
		"keywords": "changes diff",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "diff",
				"description": "Show changes all changes between the working tree and the index"
			},
			{
				"complexity": 2,
				"code": "diff [source]",
				"description": "Show changes to a file between the working tree and the index"
			}
		]
	},
	{
		"name": "commit",
		"description": "Saves the snapshot to the project history",
		"category": "Changes",
		"keywords": "changes commit",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "commit -m [message]",
				"description": "Use the given message as the commit message. If multiple -m usage are given, their values are concatenated as separate paragraphs"
			},
			{
				"complexity": 2,
				"code": "commit --all",
				"description": "Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected"
			},
			{
				"complexity": 2,
				"code": "commit --amend",
				"description": "Updates the last commit without creating a new commit"
			},
			{
				"complexity": 3,
				"code": "commit --squash",
				"description": "Create a single commit on top of the current branch"
			}
		]
	},
	{
		"name": "stash",
		"description": "Stash and restore incomplete changes",
		"category": "Changes",
		"keywords": "changes stash",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "stash list",
				"description": "Shows all your stashes"
			},
			{
				"complexity": 2,
				"code": "stash save [stash message]",
				"description": "Saves your local modifications to a new stash entry"
			},
			{
				"complexity": 2,
				"code": "stash apply stash@{index}",
				"description": "Applies the stash in index"
			},
			{
				"complexity": 2,
				"code": "stash pop stash@{index}",
				"description": "Applies the stash in index and removes it from stash list"
			},
			{
				"complexity": 2,
				"code": "stash drop stash@{index}",
				"description": "Removes the index from stash list without applying"
			},
			{
				"complexity": 2,
				"code": "stash clear",
				"description": "Clears the stash list"
			}
		]
	},
	{
		"name": "rm",
		"description": "Remove files from the index",
		"category": "Changes",
		"keywords": "changes remove rm",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "rm [source]",
				"description": "Removes file from stage area"
			}
		]
	},
	{
		"name": "mv",
		"description": "Move or rename a file or a directory",
		"category": "Changes",
		"keywords": "changes move mv",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "mv [source] [destination]",
				"description": "Moves or renames source"
			},
			{
				"complexity": 2,
				"code": "mv -f [source] [destination]",
				"description": "Forces to move or rename the source even if it exists in destination"
			}
		]
	},
	{
		"name": "tag",
		"description": "Marks the current commit with a tag",
		"category": "Changes",
		"keywords": "changes tag",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "tag",
				"description": "Lists all tags"
			},
			{
				"complexity": 2,
				"code": "tag [tag-name]",
				"description": "Marks the current commit with a [tag-name]"
			},
			{
				"complexity": 2,
				"code": "tag [tag-name] [commit-hash]",
				"description": "Marks the [commit-hash] commit with a [tag-name]"
			},
			{
				"complexity": 2,
				"code": "tag -a [tag-name]",
				"description": "Marks the current commit with an annotated [tag-name] such as v1.4"
			},
			{
				"complexity": 2,
				"code": "tag --delete [tag-name]",
				"description": "Delete existing tags with the given [tag-name]"
			}
		]
	},
	{
		"name": "branch",
		"description": "List, rename, create, or delete branches",
		"category": "Branch",
		"keywords": "branch",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "branch",
				"description": "Lists tracked branches"
			},
			{
				"complexity": 1,
				"code": "branch -a",
				"description": "List both remote-tracking branches and local branches"
			},
			{
				"complexity": 2,
				"code": "branch [branch-name]",
				"description": "Creates a new branch from HEAD called [branch-name]"
			},
			{
				"complexity": 2,
				"code": "branch -m [branch-name]",
				"description": "Rename current branch to [branch-name]"
			},
			{
				"complexity": 2,
				"code": "branch -d [branch-name]",
				"description": "Delete [branch-name]. The branch must be fully merged in its upstream branch, or in HEAD if no upstream was set with --track or --set-upstream"
			}
		]
	},
	{
		"name": "switch",
		"description": "Switch or create branches",
		"category": "Branch",
		"keywords": "branch switch",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "switch [branch-name]",
				"description": "Switches to a branch called [branch-name]"
			},
			{
				"complexity": 1,
				"code": "switch -c [branch-name]",
				"description": "Creates and switches to a new branch from HEAD called [branch-name]"
			},
			{
				"complexity": 2,
				"code": "switch -c [branch-name] [start-point]",
				"description": "Creates and switches to a new branch from [start-point] called [branch-name]"
			},
			{
				"complexity": 3,
				"code": "switch --orphan",
				"description": "Creates a new orphan branch called [branch-name] and removes all tracked files"
			}
		]
	},
	{
		"name": "checkout",
		"description": "Switch branches or restore working tree files",
		"category": "Branch",
		"keywords": "branch checkout",
		"complexity": 1,
		"usage": [
			{
				"complexity": 2,
				"code": "checkout [branch-name]",
				"description": "Switch to [branch-name] or restore working tree files"
			},
			{
				"complexity": 2,
				"code": "checkout -b [branch-name]",
				"description": "Create and switch to [branch-name] or restore working tree files"
			},
			{
				"complexity": 1,
				"code": "checkout --track [origin/branch-name]",
				"description": "Checkout and track a remote branch"
			},
			{
				"complexity": 2,
				"code": "checkout .",
				"description": "Discard all tracked local changes in HEAD"
			},
			{
				"complexity": 2,
				"code": "checkout HEAD [source]",
				"description": "Resets tracked [source] file/folder"
			}
		]
	},
	{
		"name": "fetch",
		"description": "Downloads all history from the remote repository",
		"category": "Update",
		"keywords": "update fetch",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "fetch --all",
				"description": "Fetch all remotes"
			},
			{
				"complexity": 2,
				"code": "fetch --prune",
				"description": "Before fetching, remove any remote-tracking references that no longer exist on the remote"
			}
		]
	},
	{
		"name": "pull",
		"description": "Updates the local branch from its remote counterpart",
		"category": "Update",
		"keywords": "update pull",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "pull",
				"description": "Fetch from and integrate with another repository or a local branch"
			}
		]
	},
	{
		"name": "push",
		"description": "Uploads all local branch commits to its remote counterpart",
		"category": "Update",
		"keywords": "update push",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "push",
				"description": "Update remote refs along with associated objects"
			},
			{
				"complexity": 3,
				"code": "push --force",
				"description": "Overwrite remote refs with your local branch"
			},
			{
				"complexity": 3,
				"code": "push --force-with-lease",
				"description": "Prevents overwriting remote refs with your local branch"
			}
		]
	},
	{
		"name": "merge",
		"description": "Combines the specified branch’s history into the current branch",
		"category": "Merge",
		"keywords": "merge",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "merge [branch-name]",
				"description": "Merges a branch to your current HEAD"
			}
		]
	},
	{
		"name": "rebase",
		"description": "Rebase your current HEAD onto target branch",
		"category": "Patch",
		"keywords": "patch rebase",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "rebase [branch-name]",
				"description": "Rebase your current HEAD onto branch-name"
			},
			{
				"complexity": 2,
				"code": "rebase --interactive",
				"description": "Makes a list of the commits which are about to be rebased. User can edit that list before rebasing."
			},
			{
				"complexity": 2,
				"code": "rebase --continue",
				"description": "Continue a rebase after resolving conflicts"
			},
			{
				"complexity": 2,
				"code": "rebase --abort",
				"description": "Abort a rebase"
			}
		]
	},
	{
		"name": "cherry-pick",
		"description": "Apply the changes from a different commit to your current HEAD",
		"category": "Patch",
		"keywords": "patch cherry-pick",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "cherry-pick [commit]",
				"description": "Pick and apply changes from commit hash to your current HEAD"
			}
		]
	},
	{
		"name": "reset",
		"description": "Undoes all commits after [commit], preserving changes locally",
		"category": "Undo",
		"keywords": "reset undo",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "reset",
				"description": "Resets the index entries for all paths to their state"
			},
			{
				"complexity": 2,
				"code": "reset --soft",
				"description": "Does not touch the index file or the working tree at all"
			},
			{
				"complexity": 2,
				"code": "reset --mixed",
				"description": "Resets the index but not the working tree and reports what has not been updated"
			},
			{
				"complexity": 2,
				"code": "reset --hard",
				"description": "Resets the index and working tree. Any changes to tracked files in the working tree since commit are discarded"
			}
		]
	},
	{
		"name": "revert",
		"description": "Removes all changes made by commits from repository",
		"category": "Undo",
		"keywords": "reset undo revert",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "revert HEAD",
				"description": "Revert to the latest commit"
			},
			{
				"complexity": 2,
				"code": "revert [commit-hash]",
				"description": "Revert to the [commit-hash] commit"
			},
			{
				"complexity": 2,
				"code": "revert -n [commit-hash]",
				"description": "Revert to the [commit-hash] commit but do not commit"
			}
		]
	},
	{
		"name": "clean",
		"description": "Shows untracked files about to be removed",
		"category": "Undo",
		"keywords": "reset undo clean",
		"complexity": 2,
		"usage": [
			{
				"complexity": 2,
				"code": "clean -n",
				"description": "Shows untracked files about to be removed"
			},
			{
				"complexity": 2,
				"code": "clean -f",
				"description": "Removes all untracked files"
			},
			{
				"complexity": 2,
				"code": "clean -x",
				"description": "Removes all ignored files"
			},
			{
				"complexity": 2,
				"code": "clean -i",
				"description": "Runs clean command with interactive menu"
			}
		]
	},
	{
		"name": "log",
		"description": "Lists version history for the current branch",
		"category": "History",
		"keywords": "history log",
		"complexity": 1,
		"usage": [
			{
				"complexity": 1,
				"code": "log",
				"description": "Show all commits"
			},
			{
				"complexity": 1,
				"code": "log --graph",
				"description": "Shows all commits as graph"
			},
			{
				"complexity": 2,
				"code": "log -p [source]",
				"description": "Show changes to file"
			}
		]
	},
	{
		"name": "config",
		"description": "Get and set repository or global usage",
		"category": "Administration",
		"keywords": "administration config",
		"complexity": 3,
		"usage": [
			{
				"complexity": 3,
				"code": "config -e",
				"description": "Edit repository config file"
			},
			{
				"complexity": 3,
				"code": "config --global -e",
				"description": "Edit global config file"
			},
			{
				"complexity": 3,
				"code": "config --global user.name 'Your Name'",
				"description": "Define your user name in global settings"
			},
			{
				"complexity": 3,
				"code": "config --global user.email you@mail.com",
				"description": "Define your mail in global settings"
			}
		]
	},
	{
		"name": "gc",
		"description": "Cleanup unnecessary files and optimize the local repository",
		"category": "Administration",
		"keywords": "administration gc garbage collection",
		"complexity": 3,
		"usage": [
			{
				"complexity": 3,
				"code": "gc",
				"description": "Runs a garbage collection for your local repository"
			},
			{
				"complexity": 3,
				"code": "gc --aggressive",
				"description": "Runs gc more aggressively to optimize your local repository"
			}
		]
	},
	{
		"name": "prune",
		"description": "Prune all unreachable objects from the object database",
		"category": "Administration",
		"keywords": "administration prune",
		"complexity": 3,
		"usage": [
			{
				"complexity": 3,
				"code": "prune",
				"description": "Removes objects that are no longer pointed to any object in reachable branch"
			},
			{
				"complexity": 3,
				"code": "prune -n",
				"description": "Do not remove anything; just report what it would remove"
			},
			{
				"complexity": 3,
				"code": "prune --progress",
				"description": "Shows prune progress"
			}
		]
	},
	{
		"name": "bisect",
		"description": "Use binary search to find the commit that introduced a bug",
		"category": "Debug",
		"keywords": "debug bisect",
		"complexity": 3,
		"usage": [
			{
				"complexity": 3,
				"code": "bisect start",
				"description": "Start up the git bisect wizard"
			},
			{
				"complexity": 3,
				"code": "bisect good [commit]",
				"description": "Let the git bisect wizard know of a good commit"
			},
			{
				"complexity": 3,
				"code": "bisect bad [commit]",
				"description": "Let the git bisect wizard know of a bad commit"
			},
			{
				"complexity": 3,
				"code": "bisect reset",
				"description": "End your git bisect wizard"
			}
		]
	},
	{
		"name": "blame",
		"description": "Display author metadata attached to specific committed lines in a file",
		"category": "Debug",
		"keywords": "debug blame",
		"complexity": 3,
		"usage": [
			{
				"complexity": 3,
				"code": "blame [source]",
				"description": "Show each author worked on the source including date, time and line numbers"
			},
			{
				"complexity": 3,
				"code": "blame -L x,y [source]",
				"description": "Restrict the output of source between x and y lines"
			},
			{
				"complexity": 3,
				"code": "blame -e [source]",
				"description": "Show author email address instead of username"
			},
			{
				"complexity": 3,
				"code": "blame -w [source]",
				"description": "Ignore whitespace changes"
			}
		]
	}
]
